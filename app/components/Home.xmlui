<Component name="Home">

    <Markdown>
    <![CDATA[
# Learn XMLUI

XMLUI is a framework for building UIs declaratively with XML markup and flexible theming. Here's the markup for the simplest XMLUI app.

```xml
<App>
  <Text>Hello World!</Text>
</App>
```

The <a href="https://xmlui-docs.azurewebsites.net/components/Text/" target="_blank">Text</a> component does what you'd expect. Here it is running live in this page:

    ]]>
    </Markdown>

    <Text inspect="true">Hello World!</Text>

    <Markdown>
    <![CDATA[
Hmm. The previous paragraph just looks like plain inline text. How can you tell it's a live XMLUI component?

> [!INFO]
> If you hover over an XMLUI component and a button appears,  you can click it to view the component's markup.

> Normal blockquote

Try that on the "Hello World!" paragraph above.

<details>
  <summary>Didn't find the button? Click for a hint. </summary>
  <video autoplay loop muted>
    <source src="resources/inspect-text.mp4"/>
  </video>
</details>
    ]]>
    </Markdown>

    <Markdown>
    <![CDATA[
## Working with live data

Let's try something more interesting. XMLUI components can retrieve and display live data. Here's the current status of London's tube lines:
    ]]>
    </Markdown>

    <List inspect="true" data="https://api.tfl.gov.uk/line/mode/tube/status">
        <Text>{$item.name}: {$item.lineStatuses[0].statusSeverityDescription}</Text>
    </List>

    <Bookmark id="listing-data" />

    <Markdown>
    <![CDATA[
## Listing data

You could hover over the above <a href="https://xmlui-docs.azurewebsites.net/components/List" target="blank">List</a> to see the markup but it's very concise so we'll show it here.

```
<List data="https://api.tfl.gov.uk/line/mode/tube/status">
  <Text>{$item.name}: {$item.lineStatuses[0].statusSeverityDescription}</Text>
</List>
```


The `List` component receives data by way of the `data` attribute which, in this case, just fetches JSON from a <a href="https://api.tfl.gov.uk/line/mode/tube/status" target="_blank">REST endpoint</a>. Other components, like <a href="https://xmlui-docs.azurewebsites.net/components/Table" target="blank">Table</a>, use the `data` attribute the same way.

<details>
<summary>See a sample of the data.</summary>
<pre>
[
    {
        "name": "Bakerloo",
        "lineStatuses": [
            {
                "statusSeverityDescription": "Good Service"
            }
        ]
    },
    {
    ... etc ...
    },
 ]
</pre>
</details>

 We've seen `Text` as a standalone component. Here, nested within `List`, it renders once for each item in the list. The standard XMLUI variable `$item` holds each successive JSON object. It's a JavaScript variable, so you can use dot notation and array indexing to extract values.

 ## Reactive data binding

 Let's load that same data into a <a href="https://xmlui-docs.azurewebsites.net/components/Select" target="blank">Select</a> component.

    ]]>
    </Markdown>

    <HStack>
        <Markdown width="60%">
    <![CDATA[
 ```
<Select id="lines" initialValue="bakerloo" width="30%">
    <Items data="https://api.tfl.gov.uk/line/mode/tube/status">
        <Option value="{$item.id}" label="{$item.name}" />
    </Items>
</Select>
```
    ]]>
        </Markdown>

        <ContentSeparator orientation="vertical" size="4px" />

        <Stack verticalAlignment="center">
            <Stack horizontalAlignment="center">
                <Select id="lines" initialValue="bakerloo">
                    <Items data="https://api.tfl.gov.uk/line/mode/tube/status">
                        <Option value="{$item.id}" label="{$item.name}" />
                    </Items>
                </Select>
            </Stack>
        </Stack>
    </HStack>


    <Markdown>
    <![CDATA[

Now we'll add a <a href="https://xmlui-docs.azurewebsites.net/components/Table" target="blank">Table</a> to display details about the selected tube line.
    ]]>
    </Markdown>

    <HStack>

        <Markdown width="60%">
    <![CDATA[
 ```
<DataSource
  id="stations"
  url="https://api.tfl.gov.uk/Line/{lines.value}/Route/Sequence/inbound"
  resultSelector="stations"/>

<Text>Line: {lines.value}</Text>
<Table data="{stations}">
  <Column bindTo="name" />
  <Column bindTo="modes" />
</Table>
```
The <a href="https://xmlui-docs.azurewebsites.net/components/DataSource" target="blank">DataSource</a> component works like the `data` attribute we used with `Select`: it fetches from a REST endpoint. Unlike `Select` and `Table`, `DataSource` isn't a visible component, it works behind the scenes to capture data for use by visible components.

We use `resultSelector` to target the `stations` key of the JSON object returned from the API. But notice the URL! It includes a reference to `lines`, the ID of the `Select`. In this context, `lines` is a JavaScript variable, and `lines.value` is the selected line. The initial value of the `Select` is `Bakerloo` so that's the line whose stations we see in the table.

Now choose another line and watch the table react to the change. Because we also use `lines.value`, in a `Text`, as the title of the table, that changes too. That's XMLUI-style reactive data binding in a nutshell. You don't need to write code to make this happen, it's automatic!


    ]]>
        </Markdown>

        <ContentSeparator orientation="vertical" size="4px" />


        <Stack width="40%">
            <Text>Line: {lines.value || '(not specified)'}</Text>
            <Fragment when="{lines.value}">
                <DataSource
                    id="stations"
                    url="https://api.tfl.gov.uk/Line/{lines.value}/Route/Sequence/inbound"
                    resultSelector="stations" />

                <Table data="{stations}" height="600px">
                    <Column bindTo="name" />
                    <Column bindTo="modes" />
                </Table>
            </Fragment>
        </Stack>

    </HStack>


</Component>